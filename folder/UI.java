package adb_tool.folder;

import adb_tool.Main;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Acer
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    private List<ADB_File> list = new ArrayList<>();
    private List<ADB_File> list1 = new ArrayList<>();
    private List<Devices> devi = new ArrayList<>();
    DefaultComboBoxModel<String> model;
    private DefaultTableModel tblmodel;
    private DefaultTableModel tblmodel1;
    BufferedReader reader;
    private String Devices = null;
    getDevices dv = new getDevices();
    String pacth = null;
    String line = null;
    String line1 = null;
    String folder = "/";
    String folder1 = "/";
    Process process;
    Process process1, process2;
    String copy = null;
    String sideload = null;
    int chooser = 0;
    boolean xoa = false;

    public UI() {
        initComponents();
        String exePath = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        File exeFile = new File(exePath);
        String exeDir = exeFile.getParent(); // lấy đường dẫn thư mục cha
        String tempDir = exeDir;
        pacth = tempDir;
        txt_OutPut.setText(pacth + "\n");
        txt_Pacth.setText(pacth + "\\");
        setIcon();
        setLocationRelativeTo(null);
        initTable();
        copy = null;
        model = (DefaultComboBoxModel<String>) cbo_DevicesList.getModel();
//        try {
//            ADB_Devices();
//            DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cbo_DevicesList.getModel();
//            model.removeAllElements();
//            for (Devices de : devi) {
//                model.addElement(de.Name);
//            }
//            txt_Auth.setText(devi.get(0).authorized);
//        } catch (Exception ex) {
//
//        }
//        Thread readerThread = new Thread(() -> {
//            while (running) {
//                updateOutput();
//            }
//        });
//        readerThread.start();
//        ADB_Devices();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        FC_Sideload = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        txt_LocalIP = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btn_Connect = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_OutPut = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txt_Command = new javax.swing.JTextField();
        btn_Send = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_ADB_Link = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_PC_Link = new javax.swing.JTable();
        txt_ADB_Link = new javax.swing.JTextField();
        txt_PC_Link = new javax.swing.JTextField();
        btn_ADBDevices = new javax.swing.JButton();
        btn_cls = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cbo_Reboot = new javax.swing.JComboBox<>();
        btn_Reboot = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbo_Reboot_FBM = new javax.swing.JComboBox<>();
        btn_Reboot_FBM = new javax.swing.JButton();
        FB_Devices = new javax.swing.JButton();
        btn_Scrcpy = new javax.swing.JButton();
        chk_TurnOff = new javax.swing.JCheckBox();
        btn_Copy = new javax.swing.JButton();
        btn_Paste = new javax.swing.JButton();
        btn_Delete = new javax.swing.JButton();
        btn_Cut = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txt_Pacth = new javax.swing.JTextField();
        cbo_Devices = new javax.swing.JComboBox<>();
        btn_Show = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txt_Log = new javax.swing.JTextArea();
        btn_Driver = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txt_Sideload = new javax.swing.JTextField();
        btn_FC_Sideload = new javax.swing.JButton();
        btn_Sideload = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        txt_Apk = new javax.swing.JTextField();
        btn_FC_Apk = new javax.swing.JButton();
        btn_Install_Apk = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cbo_DevicesList = new javax.swing.JComboBox<>();
        txt_Auth = new javax.swing.JLabel();
        cbo_NoA = new javax.swing.JCheckBox();
        btn_Files = new javax.swing.JButton();

        FC_Sideload.setCurrentDirectory(new java.io.File("C:\\Users"));
        FC_Sideload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FC_SideloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FC_Sideload, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FC_Sideload, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ADB FASTBOOT for NET");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N

        jLabel1.setText("Local IP adb wifi");

        btn_Connect.setText("Connect");
        btn_Connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ConnectActionPerformed(evt);
            }
        });

        txt_OutPut.setEditable(false);
        txt_OutPut.setColumns(20);
        txt_OutPut.setRows(5);
        jScrollPane2.setViewportView(txt_OutPut);

        jLabel2.setText("Command");

        btn_Send.setText("Send");
        btn_Send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SendActionPerformed(evt);
            }
        });

        tbl_ADB_Link.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_ADB_Link.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_ADB_LinkMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_ADB_Link);

        tbl_PC_Link.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_PC_Link.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_PC_LinkMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbl_PC_Link);

        txt_ADB_Link.setEditable(false);

        txt_PC_Link.setEditable(false);

        btn_ADBDevices.setText("refresh");
        btn_ADBDevices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ADBDevicesActionPerformed(evt);
            }
        });

        btn_cls.setText("clean screen log");
        btn_cls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clsActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Reboot");

        cbo_Reboot.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "system", "bootloader", "recovery", "edl" }));

        btn_Reboot.setText("Reboot");
        btn_Reboot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RebootActionPerformed(evt);
            }
        });

        jLabel4.setText("---------------------------------------------  ADB  -------------------------------------------");

        jLabel5.setText("------------------------------------------ FASTBOOT ----------------------------------------");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Reboot");

        cbo_Reboot_FBM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "system", "bootloader", "recovery", "edl" }));

        btn_Reboot_FBM.setText("Reboot");
        btn_Reboot_FBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Reboot_FBMActionPerformed(evt);
            }
        });

        FB_Devices.setText("fastboot devices");
        FB_Devices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FB_DevicesActionPerformed(evt);
            }
        });

        btn_Scrcpy.setText("show screen");
        btn_Scrcpy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ScrcpyActionPerformed(evt);
            }
        });

        chk_TurnOff.setText("Turn off screen on device");

        btn_Copy.setText("Copy");
        btn_Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CopyActionPerformed(evt);
            }
        });

        btn_Paste.setText("Paste");
        btn_Paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PasteActionPerformed(evt);
            }
        });

        btn_Delete.setText("Delete");
        btn_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DeleteActionPerformed(evt);
            }
        });

        btn_Cut.setText("Cut");
        btn_Cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CutActionPerformed(evt);
            }
        });

        jLabel7.setText("Pacth adb folder");

        txt_Pacth.setText("J:\\Users\\Acer\\Desktop\\ADB");

        cbo_Devices.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Device", "PC" }));

        btn_Show.setText("Show");
        btn_Show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ShowActionPerformed(evt);
            }
        });

        txt_Log.setEditable(false);
        txt_Log.setColumns(20);
        txt_Log.setRows(5);
        jScrollPane4.setViewportView(txt_Log);

        btn_Driver.setText("Install Driver");
        btn_Driver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DriverActionPerformed(evt);
            }
        });

        jLabel8.setText("ADB sideload");

        btn_FC_Sideload.setText("...");
        btn_FC_Sideload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_FC_SideloadActionPerformed(evt);
            }
        });

        btn_Sideload.setText("Sideload");
        btn_Sideload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SideloadActionPerformed(evt);
            }
        });

        jLabel9.setText("Install apk");

        btn_FC_Apk.setText("...");
        btn_FC_Apk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_FC_ApkActionPerformed(evt);
            }
        });

        btn_Install_Apk.setText("Install");
        btn_Install_Apk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Install_ApkActionPerformed(evt);
            }
        });

        jLabel10.setText("Devices");

        cbo_DevicesList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbo_DevicesListItemStateChanged(evt);
            }
        });

        cbo_NoA.setText("No audio");

        btn_Files.setText("Show Files");
        btn_Files.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_FilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_cls)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(FB_Devices)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(cbo_Reboot_FBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_Reboot_FBM))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbo_DevicesList, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_ADBDevices)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbo_Reboot, 0, 1, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_Reboot))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txt_LocalIP, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                                                    .addComponent(txt_Command))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btn_Send, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(btn_Connect, javax.swing.GroupLayout.Alignment.TRAILING)))
                                            .addComponent(txt_Pacth, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(6, 6, 6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btn_Scrcpy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chk_TurnOff)
                                .addGap(18, 18, 18)
                                .addComponent(cbo_NoA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txt_Auth, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_Sideload)
                            .addComponent(txt_Apk, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(btn_FC_Sideload))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_FC_Apk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_Sideload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_Install_Apk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(64, 64, 64)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btn_Copy)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_Cut)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btn_Delete))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                        .addComponent(txt_ADB_Link, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_Driver)
                        .addGap(82, 82, 82)
                        .addComponent(btn_Files)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Paste)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_PC_Link, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbo_Devices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Show)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txt_Pacth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbo_Devices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Show)
                    .addComponent(btn_Driver)
                    .addComponent(btn_Files))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_PC_Link)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_LocalIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(btn_Connect)
                        .addComponent(txt_ADB_Link)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txt_Command, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_Send)))
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Reboot)
                            .addComponent(cbo_Reboot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel10)
                            .addComponent(cbo_DevicesList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_ADBDevices))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Scrcpy)
                            .addComponent(chk_TurnOff)
                            .addComponent(cbo_NoA)
                            .addComponent(txt_Auth, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_Sideload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_FC_Sideload)
                            .addComponent(btn_Sideload)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txt_Apk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_FC_Apk)
                            .addComponent(btn_Install_Apk))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Reboot_FBM)
                            .addComponent(cbo_Reboot_FBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(FB_Devices))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 653, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cls)
                    .addComponent(btn_Copy)
                    .addComponent(btn_Paste)
                    .addComponent(btn_Delete)
                    .addComponent(btn_Cut))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setIcon() {
        // Thay đổi icon của JFrame
        Image icon = Toolkit.getDefaultToolkit().getImage(pacth + "icon.png");
        setIconImage(icon);
    }

    public void btn_copy() {
        copy = folder;
//        System.out.println("Copy file to Clipboard");
        txt_Log.append("Copy file to Clipboard \n");
//        System.out.println(copy);
        txt_Log.append(copy + "\n");
        xoa = false;
    }

    public void btn_paste() {
        String rename = copy;
        String copy1 = rename.replace(" ", "\\ ");
        try {
            // TODO add your handling code here:
            process1 = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell cp -r " + "\"" + copy1 + "\"" + " " + "\"" + folder1 + "/" + "\"");
//            System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell cp -r " + "\"" + copy1 + "\"" + " " + "\"" + folder1 + "/" + "\"");
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell cp -r " + "\"" + copy1 + "\"" + " " + "\"" + folder1 + "/" + "\"" + "\n");
            process1 = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder1);
            process1.waitFor();
            txt_PC_Link.setText(folder1);
//            System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder1);
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder1 + "\n");
            if (xoa) {
                btn_delete();
            }
            fillTable();
            fillTable1();

        } catch (IOException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void btn_delete() {
        copy = txt_ADB_Link.getText();
        String rename = copy;
        String copy1 = rename.replace(" ", "\\ ");
        try {
            process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell rm " + "\"" + copy1 + "\"");
//            System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell rm " + "\"" + copy1 + "\"");
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell rm " + "\"" + copy1 + "\"" + "\n");
            process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell rm -r " + "\"" + copy1 + "\"");
//            System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell rm -r " + "\"" + copy1 + "\"");
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell rm -r " + "\"" + copy1 + "\"" + "\n");
//            if (!xoa) {
            int lastIndex = folder.lastIndexOf("/");
            folder = folder.substring(0, lastIndex);
//            }
            process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder);
            process.waitFor();
            txt_ADB_Link.setText(folder);
//            System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder);
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder + "\n");
            fillTable();
            fillTable1();

        } catch (IOException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {

//            System.out.println("Lỗi");
        }
    }

    private void FC_SideloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FC_SideloadActionPerformed
        // TODO add your handling code here:
        if (evt.getActionCommand().equals("CancelSelection")) {
            // Xử lý logic khi người dùng nhấn nút "Cancel"
            jFrame1.dispose();
            return;
        }
        File selectedFile = FC_Sideload.getSelectedFile();
        sideload = "\"" + selectedFile.getAbsolutePath() + "\"";
        jFrame1.dispose();
        switch (chooser) {
            case 0:
                txt_Sideload.setText(pacth);
                break;
            case 1:
                txt_Apk.setText(pacth);
                break;
            default:
                throw new AssertionError();
        }
    }//GEN-LAST:event_FC_SideloadActionPerformed

    private void btn_Install_ApkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Install_ApkActionPerformed
        // TODO add your handling code here:
        if (txt_Apk.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn file apk để cài đặt");
            return;
        }

        pacth = txt_Pacth.getText();

        String adbCommand = pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " install " + sideload;
        txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " install " + sideload + "\n");
        Thread adbDeviceThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    process1 = Runtime.getRuntime().exec(adbCommand);
                    process1.waitFor();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process1.getInputStream()));

                    while ((line = reader.readLine()) != null) {
                        txt_OutPut.append(line + "\n");
                    }
                    txt_Command.setText("");

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(btn_Install_Apk, "install failed" + "\n" + ex);
                    return;

                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(btn_Install_Apk, "install failed" + "\n" + ex);
                    return;
                }
            }
        });
        adbDeviceThread.start();
    }//GEN-LAST:event_btn_Install_ApkActionPerformed

    private void btn_FC_ApkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_FC_ApkActionPerformed
        // TODO add your handling code here:
        FileFilter filter = new FileNameExtensionFilter("APK files", "apk");
        chooser = 1;
        SideloadZIP(filter);
    }//GEN-LAST:event_btn_FC_ApkActionPerformed

    private void btn_SideloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SideloadActionPerformed
        // TODO add your handling code here:
        if (txt_Sideload.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn file zip hoặc apk để sideload");
            return;
        }

        pacth = txt_Pacth.getText();
        String adbCommand = pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " sideload " + sideload;
        txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " sideload " + sideload + "\n");
        Thread adbDeviceThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    process1 = Runtime.getRuntime().exec(adbCommand);
                    process1.waitFor();

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(btn_Sideload, "sideload failed" + "\n" + ex);
                    return;

                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(btn_Sideload, "sideload failed" + "\n" + ex);
                    return;
                }
            }
        });
        Thread getThread = new Thread(new Runnable() {
            @Override
            public void run() {
                BufferedReader reader = new BufferedReader(new InputStreamReader(process1.getInputStream()));
                try {
                    while ((line = reader.readLine()) != null) {
                        txt_OutPut.append(line + "\n");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
                txt_Command.setText("");
            }
        });

        adbDeviceThread.start();
        try {
            Thread.sleep(20);
            getThread.start();
        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_SideloadActionPerformed

    private void btn_FC_SideloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_FC_SideloadActionPerformed
        // TODO add your handling code here:
        FileFilter filter = new FileNameExtensionFilter("ZIP and APK files", "zip", "apk");
        SideloadZIP(filter);
        txt_Sideload.setText(sideload);
    }//GEN-LAST:event_btn_FC_SideloadActionPerformed

    private void btn_DriverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DriverActionPerformed

        String infFilePath = pacth + "Driver\\win10\\android_winusb.inf";
        String command = "cmd.exe /c start /wait runas /user:Administrator \"rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 0 " + infFilePath + "\"" + " /quiet";

        ProcessBuilder pb = new ProcessBuilder("cmd.exe", "/C", command);
        pb.redirectErrorStream(true);
        pb.environment().put("SEE_MASK_NOZONECHECKS", "1");

        int exitCode;
        try {
            Process process = pb.start();
            exitCode = process.waitFor();
        } catch (IOException | InterruptedException e) {
            JOptionPane.showMessageDialog(this, "Cài đặt driver thất bại");
            JOptionPane.showMessageDialog(this, e);
            return;
        }

        if (exitCode == 0) {
            // Cài đặt thành công
            JOptionPane.showMessageDialog(this, "Cài đặt driver thành công");
        } else {
            // Cài đặt thất bại
            JOptionPane.showMessageDialog(this, "Cài đặt driver thất bại");
        }

    }//GEN-LAST:event_btn_DriverActionPerformed

    private void btn_ShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ShowActionPerformed
        // TODO add your handling code here:
        if (cbo_Devices.getSelectedIndex() == 0) {
            ADB_Devices1();
        } else {
            JOptionPane.showMessageDialog(this, "tính năng chưa hoàn thiện");
            return;
            //            ADB_ShowPakage();
        }
    }//GEN-LAST:event_btn_ShowActionPerformed

    private void btn_CutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CutActionPerformed
        // TODO add your handling code here:
        btn_copy();
        xoa = true;
    }//GEN-LAST:event_btn_CutActionPerformed

    private void btn_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DeleteActionPerformed
        // TODO add your handling code here:
        btn_delete();
    }//GEN-LAST:event_btn_DeleteActionPerformed

    private void btn_PasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PasteActionPerformed
        btn_paste();
    }//GEN-LAST:event_btn_PasteActionPerformed

    private void btn_CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CopyActionPerformed
        // TODO add your handling code here:
        btn_copy();
    }//GEN-LAST:event_btn_CopyActionPerformed

    private void btn_ScrcpyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ScrcpyActionPerformed
        // TODO add your handling code here:
        Thread scrcpy = new Thread(new Runnable() {
            @Override
            public void run() {
                String command;
                String scroff = " --turn-screen-off";
                String noAudio = " --no-audio";
                if (chk_TurnOff.isSelected()) {
                    if (cbo_NoA.isSelected()) {
                        command = pacth + "scrcpy -s " + cbo_DevicesList.getSelectedItem() + scroff + noAudio;
                        txt_Log.append("scrcpy -s " + cbo_DevicesList.getSelectedItem() + scroff + noAudio + "\n");
                    } else {
                        command = pacth + "scrcpy -s " + cbo_DevicesList.getSelectedItem() + scroff;
                        txt_Log.append("scrcpy -s " + cbo_DevicesList.getSelectedItem() + scroff + "\n");
                    }
                } else {
                    if (cbo_NoA.isSelected()) {
                        command = pacth + "scrcpy -s " + cbo_DevicesList.getSelectedItem() + noAudio;
                        txt_Log.append("scrcpy -s " + cbo_DevicesList.getSelectedItem() + noAudio + "\n");
                    } else {
                        command = pacth + "scrcpy -s " + cbo_DevicesList.getSelectedItem();
                        txt_Log.append("scrcpy -s " + cbo_DevicesList.getSelectedItem() + "\n");
                    }
                }

                try {
                    process = Runtime.getRuntime().exec(command);
                } catch (IOException ex) {
                    Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        );

        Thread readcmd = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((line = reader.readLine()) != null) {
                        txt_OutPut.append(line + "\n");
                    }
                    txt_Command.setText("");
                } catch (IOException ex) {
                    txt_OutPut.append("Command ERROR");
                    txt_Command.setText("");
                    return;
                }
            }
        }
        );
        scrcpy.start();
        try {
            Thread.sleep(50);
            readcmd.start();
        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_ScrcpyActionPerformed

    private void FB_DevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FB_DevicesActionPerformed
        try {
            // TODO add your handling code here:
            process = Runtime.getRuntime().exec(pacth + "fastboot devices");
            txt_Log.append("fastboot devices" + "\n");
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            while ((line = reader.readLine()) != null) {
                txt_OutPut.append(line + "\n");
            }

        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FB_DevicesActionPerformed

    private void btn_Reboot_FBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Reboot_FBMActionPerformed
        try {
            // TODO add your handling code here:
            Reboot_FBM();
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_Reboot_FBMActionPerformed

    private void btn_RebootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RebootActionPerformed
        try {
            // TODO add your handling code here:
            Reboot();
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_RebootActionPerformed

    private void btn_clsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clsActionPerformed
        // TODO add your handling code here:
        txt_OutPut.setText("");
        txt_Log.setText("");
    }//GEN-LAST:event_btn_clsActionPerformed

    private void btn_ADBDevicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ADBDevicesActionPerformed
        // TODO add your handling code here:
        try {
            ADB_Devices();
        } catch (IOException io) {
        }
    }//GEN-LAST:event_btn_ADBDevicesActionPerformed

    private void tbl_PC_LinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_PC_LinkMouseClicked
        // TODO add your handling code here:
        int index = tbl_PC_Link.getSelectedRow();
        ADB_File std = list1.get(index);
        String name = std.getFileName();

        if (name.equals("..")) {
            int lastIndex1 = folder1.lastIndexOf("/");
            folder1 = folder1.substring(0, lastIndex1);
        } else {
            if (!folder1.equals("/")) {
                folder1 += "/";
            }
            folder1 += name;
        }
        try {
            process1 = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder1);
            process1.waitFor();
            txt_PC_Link.setText(folder1);
            //            System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() +" shell ls " + folder1);
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder1 + "\n");
            fillTable1();

        } catch (IOException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbl_PC_LinkMouseClicked

    private void tbl_ADB_LinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_ADB_LinkMouseClicked
        // TODO add your handling code here:
        int index = tbl_ADB_Link.getSelectedRow();
        ADB_File std = list.get(index);
        String name = std.getFileName();

        if (name.equals("..")) {
            int lastIndex1 = folder.lastIndexOf("/");
            folder = folder.substring(0, lastIndex1);
        } else {
            if (!folder.equals("/")) {
                folder += "/";
            }
            folder += name;
        }
        try {
            process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder);
            process.waitFor();
            txt_ADB_Link.setText(folder);
            txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder + "\n");
            fillTable();
        } catch (IOException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbl_ADB_LinkMouseClicked

    private void btn_SendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SendActionPerformed
        // TODO add your handling code here:
        SendCM();
    }//GEN-LAST:event_btn_SendActionPerformed

    private void btn_ConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ConnectActionPerformed
        // TODO add your handling code here:
        Connect();
    }//GEN-LAST:event_btn_ConnectActionPerformed

    private void btn_FilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_FilesActionPerformed
        // TODO add your handling code here:
        pacth = txt_Pacth.getText();
        folder = "/";
        txt_ADB_Link.setText(folder);
        Thread shellLsThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls");
                    process.waitFor();
                    fillTable();

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(btn_Connect, "vui lòng kiểm tra lại đường dẫn thư muc adb (lưu ý có dấu \\ ở cuối đường dẫn)");
                    return;

                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(btn_Connect, "vui lòng kiểm tra lại đường dẫn thư muc adb (lưu ý có dấu \\ ở cuối đường dẫn)");
                    return;
                }
            }
        });
        shellLsThread.start();
        if (cbo_Devices.getSelectedIndex() == 0) {
            ADB_Devices1();
        } else {
            JOptionPane.showMessageDialog(this, "tính năng chưa hoàn thiện");
            return;
            //            ADB_ShowPakage();
        }
    }//GEN-LAST:event_btn_FilesActionPerformed

    private void cbo_DevicesListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbo_DevicesListItemStateChanged
        // TODO add your handling code here:
        if (cbo_DevicesList.getSelectedIndex()!=-1){
            try {
        txt_Auth.setText(devi.get(cbo_DevicesList.getSelectedIndex()).authorized);
        } catch (Exception ex){}
        }
    }//GEN-LAST:event_cbo_DevicesListItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void ADB() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);

            }
        });

    }

    public void fillTable() throws IOException {

        while (tblmodel.getRowCount() > 0) {
            tblmodel.removeRow(0);
        }
        list.clear();
        process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        list.add(new ADB_File("..", ""));
        while ((line = reader.readLine()) != null) {
            if (!line.equals("")) {
                list.add(new ADB_File(line, ""));
            }
        }
        txt_Command.setText("");
//        tblmodel.addRow(new Object[]{"..", 0});
        for (ADB_File file : list) {
            tblmodel.addRow(new Object[]{file.getFileName(), file.getFileSize()});
        }

    }

    public void fillTable1() throws IOException {

        while (tblmodel1.getRowCount() > 0) {
            tblmodel1.removeRow(0);
        }
        list1.clear();
        process1 = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " shell ls " + folder1);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process1.getInputStream()));
        list1.add(new ADB_File("..", ""));
        while ((line1 = reader.readLine()) != null) {
            if (!line1.equals("")) {
                list1.add(new ADB_File(line1, ""));
            }
        }
        txt_Command.setText("");
//        tblmodel.addRow(new Object[]{"..", 0});
        for (ADB_File file : list1) {

            tblmodel1.addRow(new Object[]{file.getFileName(), file.getFileSize()});
        }

    }

    public void initTable() {
        tblmodel = new DefaultTableModel();
        tblmodel1 = new DefaultTableModel();
        String[] cols = new String[]{"Name", "Size"};
        tblmodel.setColumnIdentifiers(cols);
        tblmodel1.setColumnIdentifiers(cols);
        tbl_ADB_Link.setModel(tblmodel);
        tbl_PC_Link.setModel(tblmodel1);
    }

    public void Connect() {
        if (txt_LocalIP.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập địa chỉ ip");
            return;
        }
        String adbConnect = pacth + "adb connect " + txt_LocalIP.getText();

        try {
            process = Runtime.getRuntime().exec(adbConnect);
            process.waitFor();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            while ((line = reader.readLine()) != null) {
                txt_OutPut.append(line);

            }

        } catch (IOException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void SendCM() {
        if (txt_Command.getText().equals("")) {
            txt_OutPut.append("\n");
            return;
        }
        String adbCommand = pacth + txt_Command.getText();

        // Tạo một thread mới để thực hiện việc gửi lệnh
        Thread sendCommandThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
//                    process = Runtime.getRuntime().exec(new String[]{"cmd", "/c", adbCommand});
                    process = Runtime.getRuntime().exec(adbCommand);
                    process.waitFor();
                } catch (IOException ex) {
                    txt_OutPut.append("Command ERROR");
                    txt_Command.setText("");
                    return;
                } catch (InterruptedException ex) {
                    txt_OutPut.append("Command ERROR");
                    txt_Command.setText("");
                    return;
                }
            }
        });

        Thread readcmd = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    while ((line = reader.readLine()) != null) {
                        txt_OutPut.append(line + "\n");
                    }
                    txt_Command.setText("");
                } catch (IOException ex) {
                    txt_OutPut.append("Command ERROR");
                    txt_Command.setText("");
                    return;
                }
            }
        }
        );

        // Bắt đầu thực hiện thread mới
        sendCommandThread.start();
        try {
            Thread.sleep(50);
            readcmd.start();
        } catch (InterruptedException ex) {
            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void ADB_Devices() throws IOException {
        pacth = txt_Pacth.getText();
        folder = "/";
        txt_ADB_Link.setText(folder);
        String adbCommand = pacth + "adb devices";
        txt_Log.append("adb devices" + "\n");
//        System.out.println(model.getSize());
        while (model.getSize() > 0) {
            model.removeElementAt(0);
        }

//        System.out.println(devi.size());
        Thread adbDeviceThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    process1 = Runtime.getRuntime().exec(adbCommand);
                    process1.waitFor();
                    reader = new BufferedReader(new InputStreamReader(process1.getInputStream()));
                    devi.clear();
                    devi = dv.DevicesList(reader);
                    txt_Command.setText("");
                    try {
//            model.removeAllElements();
//            System.out.println("here");
                        for (Devices de : devi) {
                            model.addElement(de.Name);
//                System.out.println("2");
                        }
                        cbo_DevicesList.setModel(model);
                        txt_Auth.setText(devi.get(0).authorized);
//            System.out.println("3");

                    } catch (Exception ex) {
//                        System.out.println("lỗi");
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(btn_Reboot_FBM, "vui lòng kiểm tra lại đường dẫn thư muc adb (lưu ý có dấu \\ ở cuối đường dẫn)");
                    return;
                } catch (InterruptedException ex) {
                    JOptionPane.showMessageDialog(btn_Reboot_FBM, "vui lòng kiểm tra lại đường dẫn thư muc adb (lưu ý có dấu \\ ở cuối đường dẫn)");
                    return;
                }
            }
        });
        adbDeviceThread.start();

//        System.out.println("1");
    }

    public void ADB_Devices1() {
        folder1 = "/";
        txt_PC_Link.setText(folder1);

        Thread t1 = new Thread(() -> {
            String adbCommand = pacth + "adb devices";
            txt_Log.append("adb devices" + "\n");
            try {
                process2 = Runtime.getRuntime().exec(adbCommand);
                process2.waitFor();
//                BufferedReader reader = new BufferedReader(new InputStreamReader(process2.getInputStream()));
//
//                SwingUtilities.invokeLater(() -> {
//
//                });

//                while ((line1 = reader.readLine()) != null) {
//                    SwingUtilities.invokeLater(() -> {
//                        txt_OutPut.append(line1 + "\n");
//                    });
//                }
                txt_Command.setText("");

            } catch (IOException ex) {
                Logger.getLogger(UI.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (InterruptedException ex) {
                Logger.getLogger(UI.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        });

        Thread t2 = new Thread(() -> {
            try {
                process1 = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + "  shell ls");
                process1.waitFor();

                fillTable1();

            } catch (IOException ex) {
                Logger.getLogger(UI.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (InterruptedException ex) {
                Logger.getLogger(UI.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        });

        // Start threads
        t1.start();
        t2.start();
    }

//    private void updateOutput() {
//        try {
//            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
//            String line;
//            while (running && (line = reader.readLine()) != null) {
//                txt_OutPut.append(line + "\n");
//            }
//        } catch (IOException ex) {
//            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
//    public void ADB_ShowPakage() {
////        folder1 = "";
////        txt_PC_Link.setText(folder1);
////        String adbCommand = pacth + "adb devices";
////        txt_Log.append("adb devices" + "\n");
////        try {
////            process3 = Runtime.getRuntime().exec(adbCommand);
////            process3.waitFor();
////            BufferedReader reader = new BufferedReader(new InputStreamReader(process3.getInputStream()));
////
////            while ((line1 = reader.readLine()) != null) {
////                txt_OutPut.append(line1 + "\n");
////            }
////            txt_Command.setText("");
////
////        } catch (IOException ex) {
////            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
////        } catch (InterruptedException ex) {
////            Logger.getLogger(UI.class.getName()).log(Level.SEVERE, null, ex);
////        }
//
//        // Tạo một thread mới để thực hiện việc lấy danh sách package
//        Thread listPackageThread = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    // Thực hiện lệnh adb shell pm list packages
//                    process1 = Runtime.getRuntime().exec(pacth + "adb shell pm list packages");
//                    process1.waitFor();
//
//                    // Thực hiện cập nhật giao diện với kết quả trả về
//                    fillTable1();
//
//                } catch (IOException ex) {
//                    Logger.getLogger(UI.class
//                            .getName()).log(Level.SEVERE, null, ex);
//
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(UI.class
//                            .getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//
//        // Bắt đầu thực hiện thread mới
//        listPackageThread.start();
//    }
    public void Reboot() throws IOException {
        String reboot = cbo_Reboot.getModel().getSelectedItem().toString();
        process = Runtime.getRuntime().exec(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " reboot " + reboot);
//        System.out.println(pacth + "adb -s " + cbo_DevicesList.getSelectedItem() + " reboot " + reboot);
        txt_Log.append("adb -s " + cbo_DevicesList.getSelectedItem() + " reboot " + reboot + "\n");
    }

    public void Reboot_FBM() throws IOException {
        String reboot = "";
        if (cbo_Reboot_FBM.getSelectedIndex() > 0) {
            reboot = cbo_Reboot_FBM.getModel().getSelectedItem().toString();
        }

        process = Runtime.getRuntime().exec(pacth + "fastboot reboot" + reboot);
//        System.out.println(pacth + "fastboot reboot " + reboot);
        txt_Log.append("fastboot reboot " + reboot + "\n");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FB_Devices;
    private javax.swing.JFileChooser FC_Sideload;
    private javax.swing.JButton btn_ADBDevices;
    private javax.swing.JButton btn_Connect;
    private javax.swing.JButton btn_Copy;
    private javax.swing.JButton btn_Cut;
    private javax.swing.JButton btn_Delete;
    private javax.swing.JButton btn_Driver;
    private javax.swing.JButton btn_FC_Apk;
    private javax.swing.JButton btn_FC_Sideload;
    private javax.swing.JButton btn_Files;
    private javax.swing.JButton btn_Install_Apk;
    private javax.swing.JButton btn_Paste;
    private javax.swing.JButton btn_Reboot;
    private javax.swing.JButton btn_Reboot_FBM;
    private javax.swing.JButton btn_Scrcpy;
    private javax.swing.JButton btn_Send;
    private javax.swing.JButton btn_Show;
    private javax.swing.JButton btn_Sideload;
    private javax.swing.JButton btn_cls;
    private javax.swing.JComboBox<String> cbo_Devices;
    private javax.swing.JComboBox<String> cbo_DevicesList;
    private javax.swing.JCheckBox cbo_NoA;
    private javax.swing.JComboBox<String> cbo_Reboot;
    private javax.swing.JComboBox<String> cbo_Reboot_FBM;
    private javax.swing.JCheckBox chk_TurnOff;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tbl_ADB_Link;
    private javax.swing.JTable tbl_PC_Link;
    private javax.swing.JTextField txt_ADB_Link;
    private javax.swing.JTextField txt_Apk;
    private javax.swing.JLabel txt_Auth;
    private javax.swing.JTextField txt_Command;
    private javax.swing.JTextField txt_LocalIP;
    private javax.swing.JTextArea txt_Log;
    private javax.swing.JTextArea txt_OutPut;
    private javax.swing.JTextField txt_PC_Link;
    private javax.swing.JTextField txt_Pacth;
    private javax.swing.JTextField txt_Sideload;
    // End of variables declaration//GEN-END:variables

    private void SideloadZIP(FileFilter filter) {
        jFrame1.setSize(800, 600);
        FC_Sideload.setFileFilter(filter);
        jFrame1.setVisible(true);
    }
}
